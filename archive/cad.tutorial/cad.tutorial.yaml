# single example of using a cad file
---
# metadata for the simulation
environment:
  title: _compressibleFlowVortex
  tagDirectory: false
arguments: { }
# set up the time stepper responsible for marching in time
timestepper:
  name: theMainTimeStepper
  # io controls how often the results are saved to a file for visualization and restart
  io: # by default the ablate::io::Hdf5Serializer serializer is used
    interval: 0
  # time stepper specific input arguments.  By default, the time stepper will use TSADAPTBASIC
  arguments:
    ts_type: rk
    ts_max_steps: 100
    ts_dt: 1E-6
  # sets a single box domain with periodic boundary conditions
  domain: !ablate::domain::CadFile
    name: cadMesh
    # pass in these options to petsc when setting up the domain.  Using an option list here prevents command line arguments from being seen.
    surfaceOptions:
      dm_refine: 1
    path: /Users/mcgurn/scratch/ablateInputs/cad.tutorial/cads/nozzle.igs
    modifiers:
      # if using mpi, this modifier distributes cells
      - !ablate::domain::modifiers::DistributeWithGhostCells
      # if using a FVM ghost boundary cells must be added
      - !ablate::domain::modifiers::GhostBoundaryCells
      # the DmViewFromOptions should output mesh/dm details
      - !ablate::monitors::DmViewFromOptions
        options: ascii::ascii_info
    fields:
      # all fields must be defined before solvers.  The ablate::finiteVolume::CompressibleFlowFields is a helper
      # class that creates the required fields for the compressible flow solver (rho, rhoE, rhoU, ...)
      - !ablate::finiteVolume::CompressibleFlowFields
        eos: !ablate::eos::PerfectGas &eos
          parameters:
            gamma: 1.4
            Rgas: 287.0
        conservedFieldOptions:
          # use a leastsquares interpolant for cell based calculations with the default petsc limiter
          petscfv_type: leastsquares

      # specify the extra pressure field for output
      - !ablate::domain::FieldDescription
        name: pressure
        type: FV
        location: aux # the pressure field is computed as part of decode and NOT integrated in time directly
  # set the initial conditions of the flow field
  initialization:
    - !ablate::finiteVolume::fieldFunctions::Euler
      &eulerField
      state:
        eos: *eos
        pressure: 101325.0
        temperature: 300 + x*x
        velocity: "0, 0, 0"

# this problem uses a single solver (!ablate::finiteVolume::CompressibleFlowSolver)
solver: !ablate::finiteVolume::CompressibleFlowSolver
  id: vortexFlowField

  # overwrite and set the time step based upon the CFL constraint
  computePhysicsTimeStep: false

  # a flux calculator must be specified to so solver for advection
  fluxCalculator: !ablate::finiteVolume::fluxCalculator::Ausm

  # the cfl is used to compute the physics time step
  parameters:
    cfl: 0.5

  # set the eos and transport
  eos: *eos
  transport: !ablate::eos::transport::Sutherland
    eos: *eos

  monitors:
    # output time step information for each time step
    - !ablate::monitors::TimeStepMonitor

  # using constant boundary condition values on sides 1,3 with the specified values for euler
  boundaryConditions:
    - !ablate::finiteVolume::boundaryConditions::EssentialGhost
      boundaryName: "walls"
      labelIds: [ 1 ]
      boundaryValue: *eulerField